// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User{
  id            String    @id @default(cuid())
  username      String    @unique
  email         String    @unique
  emailVerified Boolean   @default(false)
  passwordHash  String
  sessions      Session[]
  passwordResetTokens PasswordResetToken[]
  emailverificationTokens EmailVerificationToken[]
  tickets       Ticket[]
  comments      Comment[]
}

model Session{
  id        String @id
  expiresAt DateTime
  userId    String
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model EmailVerificationToken{
  id  String @id @default(cuid())
  code String
  email String
  expiresAt  DateTime 
  userId     String  
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}


model PasswordResetToken{
  tokenHash  String @id
  expiresAt  DateTime 
  userId     String  
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Ticket{
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String   @db.VarChar(1024)
  status    TicketStatus @default(OPEN)
  deadline  String   @default("2025-12-31")
  bounty    Int      @default(0)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]

  @@index([userId])

}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  DONE
}


model Comment{
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    content   String   @db.VarChar(1024)

    ticketId  String
    ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)

    userId    String?
    user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

    @@index([userId])
    @@index([ticketId])
}